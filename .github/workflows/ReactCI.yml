  # This is a basic workflow to help you get started with Actions
  name: react-CI
 
  on:
    # Triggers the workflow on push or pull request events but only for the main branch
    push:
      branches: [main,develop]
    pull_request:
      branches: [main,develop]


  jobs:

      # env  
      #secrets.DISCORD_WEBHOOK_URL
      #secrets.DOCKERHUB_TOKEN
      #secrets.DOCKERUSERNAME
      #secrets.DOCKER_REPO




   
            
          
    notify_Discord:
      if: github.actor!= 'dependabot[bot]'
      # The type of runner that the job will run on
      runs-on: ubuntu-latest

      steps:
        - name: notify Frontend CI Workflow started
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: info
              color: '#FFFFFF'
              details: "> [!IMPORTANT] >Frontend CI Workflow started!"
              footer: HORRAI.
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

      
 







      

    # This workflow contains multiple jobs
    build_test:
      if: github.actor!= 'dependabot[bot]'
      needs: [notify_Discord]
      runs-on: ubuntu-latest
      strategy:
        matrix:
          node-version: [20.x]



   
      steps:
        - name: short-sha
          uses: benjlevesque/short-sha@v2.2
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}
            
        - name: notify Build-test Stage started
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: info
              color: '#FFFFFF'
              details: "> [!IMPORTANT] >Build-test stage Started!"
              footer: HORRAI.
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
              
        # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it

        - uses: actions/checkout@v3


        - name: setup node
          uses: actions/setup-node@master
          with:
            node-version: ${{ matrix.node-version }}

        # install applicaion dependencies
        - name: Install dependencies
          run: npm  install
          
        # build and test the apps
        - name: Run the tests
          run: npm test

          
          
        - name: Build
          run: npm run build
          
        - name: Share artifact inside workflow
          uses: actions/upload-artifact@v3
          with:
            name: react-github-actions-build
            path: dist

        # - name: Run cypress
        #   uses: cypress-io/github-action@v6.5.0
  

        - name: notify Frontend Discord Build-test Stage Succeeded

          env:
            SHA: ${{ env.SHA }}
            
          uses: rjstone/discord-webhook-notify@v1
          

       
          if: success()
          with:
              severity: info
              details: "> [!IMPORTANT] >Build-test stage Succeeded "
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


              
        - name: Test Failure
          env:
            SHA: ${{ env.SHA }}
      
          uses: rjstone/discord-webhook-notify@v1
          if: failure()
          with:
              severity: error
              details: "> [!IMPORTANT] >Build-test stage Failed"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

        - name: Test Cancelled
          uses: rjstone/discord-webhook-notify@v1
          if: cancelled()
          with:
              severity: warn
              details: Build-test stage Cancelled!
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


  
    # codecov:
    #     if: github.actor!= 'dependabot[bot]'
    #     defaults:
    #       run:
    #         shell: bash
                
    #     # needs: [build_test]
    #     runs-on: ubuntu-latest
    #     steps:  
    #     - name: Checkout
    #       uses: actions/checkout@v2

    #     - name: setup node
    #       uses: actions/setup-node@master
    #       with:
    #         node-version: ${{ matrix.node-version }}
            
    
    #     - name: Install dependencies
    #       run: npm install
    
    #     - name: Run the tests
    #       run: npm test -- --coverage
          
    #     - name: Upload coverage reports to Codecov
    #       run: |
    #         curl -Os https://uploader.codecov.io/latest/linux/codecov
    #         chmod +x codecov
    #         ./codecov -t ${{ secrets.CODECOV_TOKEN }}


        # - name: short-sha
        #   uses: benjlevesque/short-sha@v2.2
        #   env:
        #     SHA: ${{ steps.short-sha.outputs.sha }}
          


        # - name: notify codecov started
        #   uses: rjstone/discord-webhook-notify@v1
        #   with:
        #       severity: info
        #       color: '#FFFFFF'
        #       details:  codecov stage started!
        #       footer: HORRAI!
        #       webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        
        
            

        
        
        
        # - name: notify Frontend  codecov Stage Succeeded
        #   uses: rjstone/discord-webhook-notify@v1
        #   if: success()
        #   with:
        #       severity: info
        #       details: codecov stage Succeeded on Branch ${{ github.head_ref }}!
        #       footer: sha ${{ env.SHA }}
        #       webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        #   env:
        #     SHA: ${{ env.SHA }}
              
        # - name: Test Failure
        #   uses: rjstone/discord-webhook-notify@v1
        #   if: failure()
        #   with:
        #       severity: error
        #       details: codecov stage Failed on Branch ${{ github.head_ref }}!
        #       footer: sha ${{ env.SHA }}
        #       webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        #   env:
        #     SHA: ${{ env.SHA }}
            
        # - name: Test Cancelled
        #   uses: rjstone/discord-webhook-notify@v1
        #   if: cancelled()
        #   with:
        #       severity: warn
        #       details: Lint Cancelled!
        #       footer: sha ${{ env.SHA }}
        #       webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        #   env:
        #     SHA: ${{ env.SHA }}


    


    lint:
      if: github.actor!= 'dependabot[bot]'
      defaults:
        run:
          shell: bash
              
      needs: [build_test]
      runs-on: ubuntu-latest
      steps:    
        - name: short-sha
          uses: benjlevesque/short-sha@v2.2
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}
            

        - name: notify lint started
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: info
              color: '#FFFFFF'
              details:  "> [!IMPORTANT] >Lint stage started!"
              footer: HORRAI!
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}

              
    


        - uses: actions/checkout@v3
          name: 'Checkout repository'
  
        - name: Share artifact inside workflow
          uses: actions/download-artifact@v3
          with:
            name: react-github-actions-build
            path: dist
  
        ##############################
        # Run Linter against code base #
        ################################
        - name: Lint Code Base
          uses: super-linter/super-linter/slim@v5
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            DISABLE_ERRORS: true


  

        - name: notify Frontend  lint Stage Succeeded
          uses: rjstone/discord-webhook-notify@v1
          if: success()
          with:
              severity: info
              details: "> [!IMPORTANT] >Lint stage Succeeded "
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
              
        - name: Test Failure
          uses: rjstone/discord-webhook-notify@v1
          if: failure()
          with:
              severity: error
              details: "> [!IMPORTANT] >Lint stage Failed"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
            
        - name: Test Cancelled
          uses: rjstone/discord-webhook-notify@v1
          if: cancelled()
          with:
              severity: warn
              details: Lint Cancelled!
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}



          
    analyze:
      if: github.actor!= 'dependabot[bot]'
      name: Analyze code
      runs-on: ubuntu-latest
      needs: [build_test]
      permissions:
        actions: read
        contents: read
        security-events: write
        

      strategy:
        fail-fast: false
        matrix:
          language: [ 'javascript' ]
          # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]

      steps:
      
      - name: short-sha
        uses: benjlevesque/short-sha@v2.2
        env:
          SHA: ${{ steps.short-sha.outputs.sha }}
          
      - name: notify analyze started
        uses: rjstone/discord-webhook-notify@v1
        with:
            severity: info
            color: '#FFFFFF'
            details: "> [!IMPORTANT] >Analyze stage started!"
            footer: HORRAI!
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}


  
      - name: Checkout repository
        uses: actions/checkout@v3

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # queries: ./path/to/local/query, your-org/your-repo/queries@main

      # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
      # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

  
      # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines
      #    and modify them (or add more) to build your code if your project
      #    uses a compiled language

      #- run: |
      #   make bootstrap
      #   make release

      - name: Perform CodeQL Analysis
        uses:  github/codeql-action/analyze@v2

        

      - name: notify analyze Stage Succeeded
        uses: rjstone/discord-webhook-notify@v1
        if: success()
        with:
            severity: info
            details: "> [!IMPORTANT] >Analyze stage Succeeded"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
      - name: Test Failure
        uses: rjstone/discord-webhook-notify@v1
        if: failure()
        with:
            severity: error
            details: "> [!IMPORTANT] >Analyze stage Failed"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
          SHA: ${{ env.SHA }}
      - name: Test Cancelled
        uses: rjstone/discord-webhook-notify@v1
        if: cancelled()
        with:
            severity: warn
            details: "> [!IMPORTANT] >Analyze Cancelled!"
            footer: sha ${{ env.SHA }}
            webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
        env:
            SHA: ${{ env.SHA }}



          
                    
    push_to_Docker_Hub:
      
      if: github.actor!= 'dependabot[bot]'
      runs-on: ubuntu-latest
      # build docker image and push to docker hub
      # only if the app build and test successfully
      needs: [build_test,analyze,lint]
      steps:
        - name: short-sha
          uses: benjlevesque/short-sha@v2.2
          env:
            SHA: ${{ steps.short-sha.outputs.sha }}
            
                
        - name: notify Push to Dockerhub started
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: info
              color: '#FFFFFF'
              details: "> [!IMPORTANT] >Push to Dockerhub stage started!"
              footer: HORRAI!
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}



        - name: Set up QEMU
          uses: docker/setup-qemu-action@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to DockerHub
          uses: docker/login-action@v3
          with:
            username: ${{ secrets.DOCKERUSERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
          
        - name: Checkout repository
          uses: actions/checkout@v3


        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: |
              ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:latest
              ${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}:${{ github.head_ref }}${{ env.SHA }}



    
        - name: Clean up Docker Tags
          run: |
            #!/bin/bash
            
            REPO_NAME=${{ secrets.DOCKERUSERNAME }}/${{ secrets.DOCKER_REPO }}  # Replace with your Docker repository name
            USER_NAME=${{ secrets.DOCKERUSERNAME }}
            # Get list of tags for the repository
            TAGS=$(curl -sS "https://hub.docker.com/v2/repositories/${REPO_NAME}/tags/?page_size=10000" | jq -r '.results|.[]|.name')
            
            # Retain the first three tags (most recent)
            KEEP_TAGS=$(echo "$TAGS" | head -n 3)
            
            echo "All Tags: $TAGS"
            echo "Retaining Tags: $KEEP_TAGS"
            
            TOKEN=${{ secrets.DOCKERHUB_TOKEN }} # Replace with your Docker Hub Personal Access Token
            HUB_TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"$USER_NAME\", \"password\": \"$TOKEN\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
           
            
            # Loop through all tags, delete those not in the retained list
            for tag in $TAGS; do
            
                if [[  "$KEEP_TAGS" =~ "$tag" ]]; then
                    echo "keeping $tag"
                    
                else
            
                    response=$(curl -i -X DELETE   -H "Accept: application/json"   -H "Authorization: JWT $HUB_TOKEN"   https://hub.docker.com/v2/repositories/$REPO_NAME/tags/$tag/)
                    echo "Deleted tag: $tag - Response: $response"
                    
                fi
            done



          

        - name: notify Push to Dockerhub Stage Succeeded
          uses: rjstone/discord-webhook-notify@v1
          if: success()
          with:
              severity: info
              details: "> [!IMPORTANT] >Push to DockerHub stage Succeeded "
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
              
        - name: Test Failure
          uses: rjstone/discord-webhook-notify@v1
          if: failure()
          with:
              severity: error
              details: "> [!IMPORTANT] >Push to DockerHub stage Failed"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}
        - name: Test Cancelled
          uses: rjstone/discord-webhook-notify@v1
          if: cancelled()
          with:
              severity: warn
              details: "> [!IMPORTANT] >Push to DockerHub Cancelled!"
              footer: sha ${{ env.SHA }}
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          env:
            SHA: ${{ env.SHA }}




    Start-ACI:
      runs-on: ubuntu-latest
      if: github.actor!= 'dependabot[bot]'
      needs: [push_to_Docker_Hub]
      steps:
      
        - name: Azure Login
          uses: azure/login@v1
          with:
            creds: ${{ secrets.AZURE_CREDENTIALS }}


            ####################################################################

        - name: Check ACI Status
          id: check_status
          run: |
            aci_status=$(az container show --name hackmaze-frontend --resource-group react-rc --query "instanceView.state" -o tsv)
            echo "::set-output name=status::$aci_status"
        
        - name: Start ACI if stopped
          if: steps.check_status.outputs.status == 'Stopped'
          run: |
            az container start --name hackmaze-frontend --resource-group react-rc
        
        - name: Restart ACI
          run: |
            az container restart --name hackmaze-frontend --resource-group react-rc

#################################################################################################


        - name: notify start ACI started
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: info
              color: '#007fff'
              details: "> [!IMPORTANT] >ACI is online  [Try me](http://hackmaze.edfxbug2fse2bhgk.germanynorth.azurecontainer.io)"
              footer: HORRAI!
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}




            
        - name: Stop ACI after 2 min
          run: |
            sleep 120
             az container stop --name hackmaze-frontend --resource-group react-rc
        
        
        - name:  ACI stopped
          uses: rjstone/discord-webhook-notify@v1
          with:
              severity: warn
              color: '#85BB65'
              details: "> [!IMPORTANT] >ACI is offline  [Watchme](https://www.youtube.com/watch?v=JEzqoRCgD5Q)"
              
              footer:  "$$$$$"
              webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
